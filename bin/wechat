#!/usr/bin/env ruby

lib = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(lib) if File.directory?(lib) && !$LOAD_PATH.include?(lib)

require 'thor'
require 'wechat'
require 'json'
require 'active_support' # To support Rails 4.2.1, see #17936
require 'active_support/dependencies/autoload'
require 'active_support/core_ext'
require 'active_support/json'
require 'fileutils'
require 'yaml'
require 'wechat/api_loader'
require 'cgi'
require 'Redis'

module Wechat
  module Token
    class AccessToken
      attr_accessor :redis
      def token
        @redis.hget("wechat_authorizer_access_token_#{@component_appid}_#{@authorizer_appid}", 'authorizer_access_token')
      end

      def component_access_token
        @redis.hget("wechat_component_access_token_#{@component_appid}", 'component_access_token')
      end
    end
  end
end

class App < Thor
  package_name 'Wechat'
  class_option :account, aliases: '-a', default: :default, desc: 'Name of Wechat account configuration.'

  class_option :authorizer_appid, aliases: '-u', desc: 'authorizer appid'
  class_option :redis_host, aliases: '-h', desc: 'redis host'
  class_option :redis_port, aliases: '-p', desc: 'redis port'
  class_option :redis_db, aliases: '-d', desc: 'redis db'

  attr_reader :wechat_api_client
  no_commands do
    def wechat_api
      @wechat_api_client ||= Wechat::ApiLoader.with(:account => options['account'])

      access_token = Wechat::Token::AccessToken.new(@wechat_api_client.component_appid, options['authorizer_appid'])
      access_token.redis = Redis.new(:host => options['redis_host'] || '127.0.0.1', :port => options['redis_port'] || 6379, :db => options['redis_db'] || 0)

      @wechat_api_client.access_token = access_token
      @wechat_api_client
    end
  end

  desc 'callbackip', '获取微信服务器IP地址'
  def callbackip
    puts wechat_api.callbackip
  end

  desc 'qrcode_download [TICKET, QR_CODE_PIC_PATH]', '通过ticket下载二维码'
  def qrcode_download(ticket, qr_code_pic_path)
    tmp_file = wechat_api.qrcode(ticket)
    FileUtils.mv(tmp_file.path, qr_code_pic_path)
    puts 'File downloaded'
  end

  desc 'group_create [GROUP_NAME]', '创建分组'
  def group_create(group_name)
    puts wechat_api.group_create(group_name)
  end

  desc 'groups', '查询所有分组'
  def groups
    puts wechat_api.groups
  end

  desc 'user_group [OPEN_ID]', '查询用户所在分组'
  def user_group(openid)
    puts wechat_api.user_group(openid)
  end

  desc 'group_update [GROUP_ID, NEW_GROUP_NAME]', '修改分组名'
  def group_update(groupid, new_group_name)
    puts wechat_api.group_update(groupid, new_group_name)
  end

  desc 'user_change_group [OPEN_ID, TO_GROUP_ID]', '移动用户分组'
  def user_change_group(openid, to_groupid)
    puts wechat_api.user_change_group(openid, to_groupid)
  end

  desc 'group_delete [GROUP_ID]', '删除分组'
  def group_delete(groupid)
    puts wechat_api.group_delete(groupid)
  end

  desc 'users', '关注者列表'
  def users
    puts wechat_api.users
  end

  desc 'user_batchget [OPEN_ID_LIST]', '批量获取用户基本信息'
  def user_batchget(openidlist)
    puts wechat_api.user_batchget(openidlist.split(','))
  end

  desc 'qrcode_create_scene [SCENE_ID, EXPIRE_SECONDS]', '请求临时二维码'
  def qrcode_create_scene(scene_id, expire_seconds = 604800)
    puts wechat_api.qrcode_create_scene(scene_id, expire_seconds)
  end

  desc 'qrcode_create_limit_scene [SCENE_ID_OR_STR]', '请求永久二维码'
  def qrcode_create_limit_scene(scene_id_or_str)
    puts wechat_api.qrcode_create_limit_scene(scene_id_or_str)
  end

  desc 'short_url [LONG_URL]', '长链接转短链接'
  def short_url(long_url)
    puts wechat_api.short_url(long_url)
  end

  desc 'customservice_getonlinekflist', '获取在线客服接待信息'
  def customservice_getonlinekflist
    puts wechat_api.customservice_getonlinekflist
  end

  desc 'user [OPEN_ID]', '获取用户基本信息'
  def user(open_id)
    puts wechat_api.user(open_id)
  end

  desc 'user_update_remark [OPEN_ID, REMARK]', '设置备注名'
  def user_update_remark(openid, remark)
    puts wechat_api.user_update_remark(openid, remark)
  end

  desc 'menu', '当前菜单'
  def menu
    puts wechat_api.menu
  end

  desc 'menu_delete', '删除菜单'
  def menu_delete
    puts 'Menu deleted' if wechat_api.menu_delete
  end

  desc 'menu_create [MENU_YAML_PATH]', '创建菜单'
  def menu_create(menu_yaml_path)
    menu = YAML.load(File.read(menu_yaml_path))
    puts 'Menu created' if wechat_api.menu_create(menu)
  end

  desc 'menu_addconditional [CONDITIONAL_MENU_YAML_PATH]', '创建个性化菜单'
  def menu_addconditional(conditional_menu_yaml_path)
    conditional_menu = YAML.load(File.read(conditional_menu_yaml_path))
    add_result = wechat_api.menu_addconditional(conditional_menu)
    puts "Conditional menu created: #{add_result}" if add_result
  end

  desc 'menu_trymatch [USER_ID]', '测试个性化菜单匹配结果'
  def menu_trymatch(user_id)
    puts wechat_api.menu_trymatch(user_id)
  end

  desc 'menu_delconditional [MENU_ID]', '删除个性化菜单'
  def menu_delconditional(menuid)
    puts wechat_api.menu_delconditional(menuid)
  end

  desc 'media [MEDIA_ID, PATH]', '媒体下载'
  def media(media_id, path)
    tmp_file = wechat_api.media(media_id)
    FileUtils.mv(tmp_file.path, path)
    puts 'File downloaded'
  end

  desc 'media_hq [MEDIA_ID, PATH]', '高清音频媒体下载'
  def media_hq(media_id, path)
    tmp_file = wechat_api.media_hq(media_id)
    FileUtils.mv(tmp_file.path, path)
    puts 'File downloaded'
  end

  desc 'media_create [MEDIA_TYPE, PATH]', '媒体上传'
  def media_create(type, path)
    puts wechat_api.media_create(type, path)
  end

  desc 'media_uploadimg [IMAGE_PATH]', '上传图文消息内的图片'
  def media_uploadimg(image_path)
    puts wechat_api.media_uploadimg(image_path)
  end

  desc 'material [MEDIA_ID, PATH]', '永久媒体下载'
  def material(media_id, path)
    tmp_file = wechat_api.material(media_id)
    FileUtils.mv(tmp_file.path, path)
    puts 'File downloaded'
  end

  desc 'material_add [MEDIA_TYPE, PATH]', '永久媒体上传'
  def material_add(type, path)
    puts wechat_api.material_add(type, path)
  end

  desc 'material_delete [MEDIA_ID]', '删除永久素材'
  def material_delete(media_id)
    puts wechat_api.material_delete(media_id)
  end

  desc 'material_count', '获取永久素材总数'
  def material_count
    puts wechat_api.material_count
  end

  desc 'material_list [TYPE, OFFSET, COUNT]', '获取永久素材列表'
  def material_list(type, offset, count)
    r = wechat_api.material_list(type, offset, count)
    if %w(image voice video file).include?(type)
      puts "errcode: #{r['errcode']} errmsg: #{r['errmsg']} total_count: #{r['total_count']} item_count: #{r['item_count']}"
      if wechat_api.is_a?(Wechat::CorpApi)
        r['itemlist'].each { |i| puts "#{i['media_id']} #{i['filename']} #{Time.at(i['update_time'].to_i)}" }
      else
        r['item'].each { |i| puts "#{i['media_id']} #{i['name']} #{Time.at(i['update_time'].to_i)}" }
      end
    else
      puts r
    end
  end

  desc 'custom_text [OPENID, TEXT_MESSAGE]', '发送文字客服消息'
  def custom_text(openid, text_message)
    puts wechat_api.custom_message_send Wechat::Message.to(openid).text(text_message)
  end

  desc 'custom_image [OPENID, IMAGE_PATH]', '发送图片客服消息'
  def custom_image(openid, image_path)
    api = wechat_api
    media_id = api.media_create('image', image_path)['media_id']
    puts api.custom_message_send Wechat::Message.to(openid).image(media_id)
  end

  desc 'custom_voice [OPENID, VOICE_PATH]', '发送语音客服消息'
  def custom_voice(openid, voice_path)
    api = wechat_api
    media_id = api.media_create('voice', voice_path)['media_id']
    puts api.custom_message_send Wechat::Message.to(openid).voice(media_id)
  end

  desc 'custom_video [OPENID, VIDEO_PATH]', '发送视频客服消息'
  method_option :title, aliases: '-h', desc: '视频标题'
  method_option :description, aliases: '-d', desc: '视频描述'
  def custom_video(openid, video_path)
    api = wechat_api
    api_opts = options.slice(:title, :description)
    media_id = api.media_create('video', video_path)['media_id']
    puts api.custom_message_send Wechat::Message.to(openid).video(media_id, api_opts)
  end

  desc 'custom_music [OPENID, THUMBNAIL_PATH, MUSIC_URL]', '发送音乐客服消息'
  method_option :title, aliases: '-h', desc: '音乐标题'
  method_option :description, aliases: '-d', desc: '音乐描述'
  method_option :HQ_music_url, aliases: '-u', desc: '高质量音乐URL链接'
  def custom_music(openid, thumbnail_path, music_url)
    api = wechat_api
    api_opts = options.slice(:title, :description, :HQ_music_url)
    thumb_media_id = api.media_create('thumb', thumbnail_path)['thumb_media_id']
    puts api.custom_message_send Wechat::Message.to(openid).music(thumb_media_id, music_url, api_opts)
  end

  desc 'custom_news [OPENID, NEWS_YAML_PATH]', '发送图文客服消息'
  def custom_news(openid, news_yaml_path)
    articles = YAML.load(File.read(news_yaml_path))
    puts wechat_api.custom_message_send Wechat::Message.to(openid).news(articles['articles'])
  end

  desc 'template_message [OPENID, TEMPLATE_YAML_PATH]', '模板消息接口'
  def template_message(openid, template_yaml_path)
    template = YAML.load(File.read(template_yaml_path))
    puts wechat_api.template_message_send Wechat::Message.to(openid).template(template['template'])
  end

  desc 'tags', '获取所有标签'
  def tags
    puts wechat_api.tags
  end

  desc 'tag_create [TAGNAME, TAG_ID]', '创建标签'
  def tag_create(tag_name)
    puts wechat_api.tag_create(tag_name)
  end

  desc 'tag_update [TAG_ID, TAGNAME]', '更新标签名字'
  def tag_update(tagid, tagname)
    puts wechat_api.tag_update(tagid, tagname)
  end

  desc 'tag_delete [TAG_ID]', '删除标签'
  def tag_delete(tagid)
    puts wechat_api.tag_delete(tagid)
  end


  desc 'tag_add_user [TAG_ID, OPEN_IDS]', '批量为用户打标签'
  def tag_add_user(tagid, open_or_user_ids)
    puts wechat_api.tag_add_user(tagid, open_or_user_ids.split(','))
  end

  desc 'tag_del_user [TAG_ID, OPEN_IDS]', '批量为用户取消标签'
  def tag_del_user(tagid, open_or_user_ids)
    puts wechat_api.tag_del_user(tagid, open_or_user_ids.split(','))
  end

  desc 'tag [TAGID]', '获取标签下粉丝列表'
  def tag(tagid)
    puts wechat_api.tag tagid
  end
end

App.start
